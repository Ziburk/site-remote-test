const pool = require('../config/db');
const bot = require('../bot/bot');

const notificationService = {

    //–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async checkAndSendNotifications() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏,
            // —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–µ
            const query = `
                SELECT 
                    t.*,
                    tu.telegram_chat_id,
                    c.name as category_name
                FROM tasks t
                JOIN telegram_users tu ON t.user_id = tu.user_id
                LEFT JOIN categories c ON t.category_id = c.category_id AND t.user_id = c.user_id
                WHERE t.notifications_enabled = true
                    AND t.status = 'active'
                    AND t.notification_time >= NOW()
                    AND t.notification_time < NOW() + INTERVAL '1 minute'
                    AND NOT EXISTS (
                        SELECT 1 
                        FROM notification_history nh 
                        WHERE nh.task_id = t.task_id
                            AND nh.sent_at > NOW()
                    )
            `;

            const result = await pool.query(query);
            const tasksToNotify = result.rows;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            for (const task of tasksToNotify) {
                try {
                    const message = this.formatNotificationMessage(task);
                    await bot.telegram.sendMessage(task.telegram_chat_id, message, { parse_mode: 'HTML' });

                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    await pool.query(
                        `INSERT INTO notification_history (task_id, user_id, status)
                         VALUES ($1, $2, $3)
                         RETURNING *`,
                        [task.task_id, task.user_id, 'sent']
                    );
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.task_id}:`, error);
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    await pool.query(
                        `INSERT INTO notification_history (task_id, user_id, status)
                         VALUES ($1, $2, $3)
                         RETURNING *`,
                        [task.task_id, task.user_id, 'failed']
                    );
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    },

    //–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    formatNotificationMessage(task) {
        const dueDate = task.due_date ? new Date(task.due_date).toLocaleDateString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω';
        const category = task.category_name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';

        return `üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!</b>\n\n` +
               `üìå <b>–ó–∞–¥–∞—á–∞:</b> ${task.title}\n` +
               `üìÖ <b>–°—Ä–æ–∫:</b> ${dueDate}\n` +
               `üè∑ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${category}\n` +
               (task.description ? `\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${task.description}` : '');
    },

    //–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏
    async clearNotificationHistory(taskId, userId) {
        try {
            await pool.query(
                'DELETE FROM notification_history WHERE task_id = $1 AND user_id = $2',
                [taskId, userId]
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    },

    //–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    startNotificationService() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        setInterval(async () => {
            await this.checkAndSendNotifications();
        }, 60000); // 60000 –º—Å = 1 –º–∏–Ω—É—Ç–∞

        console.log('–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');
    }
};

module.exports = notificationService; 