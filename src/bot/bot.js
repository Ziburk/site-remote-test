const { Telegraf, Markup } = require('telegraf');
const config = require('../config/config');
const db = require('./db');

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Å—Å–∏–π
const { session } = require('telegraf');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
const bot = new Telegraf(config.telegramToken);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
bot.use(session());

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
let users = {};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
let categories = {};

// –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initializeUserData(userId) {
    if (!users[userId]) {
        users[userId] = {
            tasks: {
                active: [],
                completed: []
            },
            categories: {
                'other': {
                    id: 'other',
                    name: '–û–±—â–µ–µ',
                    color: '#607D8B'
                },
                'work': {
                    id: 'work',
                    name: '–†–∞–±–æ—Ç–∞',
                    color: '#FF5252'
                },
                'personal': {
                    id: 'personal',
                    name: '–õ–∏—á–Ω–æ–µ',
                    color: '#69F0AE'
                },
                'shopping': {
                    id: 'shopping',
                    name: '–ü–æ–∫—É–ø–∫–∏',
                    color: '#448AFF'
                }
            }
        };
    }
    return users[userId];
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function loadCategories(userId) {
    try {
        const userCategories = await db.getUserCategories(userId);
        categories = userCategories.reduce((acc, category) => {
            acc[category.category_id] = category;
            return acc;
        }, {});
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    if (!dateString) return '–ë–µ–∑ —Å—Ä–æ–∫–∞';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function createCalendarKeyboard(selectedDate = null, isNotification = false) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const currentDate = selectedDate ? new Date(selectedDate) : new Date();
    
    const keyboard = [];
    const monthNames = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.push([
        Markup.button.callback('‚Üê', `calendar:${currentDate.getFullYear()}:${currentDate.getMonth()}:prev`),
        Markup.button.callback(
            `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`,
            'ignore'
        ),
        Markup.button.callback('‚Üí', `calendar:${currentDate.getFullYear()}:${currentDate.getMonth()}:next`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    keyboard.push(['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map(day =>
        Markup.button.callback(day, 'ignore')
    ));
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    let startingDay = firstDay.getDay() || 7; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 0 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ 7
    startingDay--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–Ω–µ–π
    let days = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    for (let i = 0; i < startingDay; i++) {
        days.push(Markup.button.callback(' ', 'ignore'));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
        date.setHours(0, 0, 0, 0);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è callback_data
        const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const displayDay = String(day).padStart(2, '0');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
        const isDisabled = date < today;
        
        if (isDisabled) {
            days.push(Markup.button.callback(displayDay, 'ignore'));
        } else {
            const callbackPrefix = isNotification ? 'select_notification_date' : 'select_date';
            days.push(Markup.button.callback(displayDay, `${callbackPrefix}:${formattedDate}`));
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
        if ((startingDay + day) % 7 === 0) {
            keyboard.push(days);
            days = [];
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
    if (days.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        while (days.length < 7) {
            days.push(Markup.button.callback(' ', 'ignore'));
        }
        keyboard.push(days);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –¥–∞—Ç—ã" —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á
    if (!isNotification) {
        keyboard.push([Markup.button.callback('–ë–µ–∑ –¥–∞—Ç—ã', 'select_date:no_date')]);
    }
    
    return Markup.inlineKeyboard(keyboard);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const keyboard = Markup.keyboard([
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'],
            ['üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['‚ùì –ü–æ–º–æ—â—å']
        ]).resize();

        ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.command('add', (ctx) => startAddingTask(ctx));

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
    ctx.reply(
        '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n' +
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n' +
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n' +
        '/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n' +
        '/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /list
bot.command('list', (ctx) => showTasksList(ctx));

// –ö–æ–º–∞–Ω–¥–∞ /categories
bot.command('categories', (ctx) => showCategories(ctx));

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.command('stats', (ctx) => showStats(ctx));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', (ctx) => startAddingTask(ctx));
bot.hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', (ctx) => showTasksList(ctx));
bot.hears('üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', (ctx) => showCategories(ctx));
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => showStats(ctx));
bot.hears('‚ùì –ü–æ–º–æ—â—å', (ctx) => {
    ctx.reply(
        '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n' +
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n' +
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n' +
        '/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n' +
        '/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.'
    );
});

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async function startAddingTask(ctx) {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        await loadCategories(user.user_id);
        
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
        ctx.session = {
            state: 'waiting_task_name',
            userId: user.user_id
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async function showTasksList(ctx) {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞
        await loadCategories(user.user_id);

        const tasks = await db.getUserTasks(user.user_id);

        let message = 'üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>\n\n';

        if (tasks.active.length > 0) {
            message += 'üìå <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n';
            message += tasks.active.map((task, index) => 
                formatTaskForList(task)
            ).join('\n');
        } else {
            message += '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n';
        }

        message += '\n';

        if (tasks.completed.length > 0) {
            message += '‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n';
            message += tasks.completed.map((task, index) => 
                formatTaskForList(task)
            ).join('\n');
        } else {
            message += '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n';
        }

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏', 'manage_tasks')],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', 'add_task')],
            [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_menu')]
        ]);

        await ctx.reply(message, {
            parse_mode: 'HTML',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function showTasksForManagement(ctx) {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const tasks = await db.getUserTasks(user.user_id);
        const keyboard = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if (tasks.active.length > 0) {
            keyboard.push([Markup.button.callback('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:', 'ignore')]);
            tasks.active.forEach(task => {
                keyboard.push([
                    Markup.button.callback(`üìå ${task.title}`, `view_task:${task.task_id}:active`)
                ]);
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if (tasks.completed.length > 0) {
            keyboard.push([Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', 'ignore')]);
            tasks.completed.forEach(task => {
                keyboard.push([
                    Markup.button.callback(`‚úì ${task.title}`, `view_task:${task.task_id}:completed`)
                ]);
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_tasks')]);

        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(keyboard));

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
async function showTaskDetails(ctx, taskId, status) {
    try {
        const task = await db.getTaskById(taskId);
        if (!task) {
            ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
        await loadCategories(task.user_id);

        const category = categories[task.category_id] || { name: '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' };
        const statusEmoji = task.status === 'completed' ? '‚úÖ' : 'üìù';

        let message = `${statusEmoji} <b>${task.title}</b>\n\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (task.description && task.description.trim()) {
            message += `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n${task.description}\n\n`;
        }
        
        message += `üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}\n`;
        message += `üìÖ –°—Ä–æ–∫: ${formatDate(task.due_date)}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        if (task.notifications_enabled) {
            const notificationTime = task.notification_time ? 
                new Date(task.notification_time).toLocaleString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }) : '–ù–µ –∑–∞–¥–∞–Ω–æ';
            message += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${notificationTime}\n`;
        } else {
            message += 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã\n';
        }

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', `edit_title:${taskId}`),
                Markup.button.callback('üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', `change_date:${taskId}`)
            ],
            [
                Markup.button.callback('üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', `change_category:${taskId}`),
                Markup.button.callback('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', `notifications:${taskId}`)
            ],
            [
                Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', `edit_description:${taskId}`)
            ],
            [
                task.status === 'completed' 
                    ? Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ', `uncomplete:${taskId}`)
                    : Markup.button.callback('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', `complete:${taskId}`)
            ],
            [
                Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', `delete:${taskId}`),
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_list')
            ]
        ]);

        await ctx.reply(message, { 
            parse_mode: 'HTML',
            ...keyboard 
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
bot.action('manage_tasks', (ctx) => showTasksForManagement(ctx));
bot.action('add_task', (ctx) => startAddingTask(ctx));
bot.action('back_to_tasks', (ctx) => showTasksList(ctx));
bot.action('back_to_task_list', (ctx) => showTasksForManagement(ctx));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
bot.action(/^view_task:(\d+):(active|completed)$/, (ctx) => {
    const [taskId, status] = ctx.match.slice(1);
    showTaskDetails(ctx, taskId, status);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π
bot.action(/^edit_title:(\d+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    ctx.session = {
        state: 'waiting_new_title',
        taskId: taskId
    };
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
bot.action(/^change_date:(\d+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        ctx.session = {
            state: 'waiting_new_date',
            taskId: taskId
        };
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:', {
            parse_mode: 'HTML',
            ...createCalendarKeyboard()
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^change_category:(\d+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const categories = await db.getUserCategories(user.user_id);
        const keyboard = Markup.inlineKeyboard([
            ...categories.map(category => [
                Markup.button.callback(category.name, `set_category:${taskId}:${category.category_id}`)
            ]),
            [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', `show_task:${taskId}`)]
        ]);

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', keyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^set_category:(\d+):(.+)$/, async (ctx) => {
    try {
        const [taskId, categoryId] = ctx.match.slice(1);
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        await db.updateTaskCategory(taskId, categoryId, user.user_id);
        await ctx.answerCbQuery('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–∞');
        await showTaskDetails(ctx, taskId, 'active');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
});

bot.action(/^delete:(\d+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        await db.deleteTask(taskId, user.user_id);
        await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
        await showTasksList(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
});

bot.action(/^complete_task:(\d+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
        const tasks = await db.getUserTasks(user.user_id);
        const maxCompletedOrder = tasks.completed.reduce((max, task) => 
            Math.max(max, task.order || 0), -1);

        // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–π order = 0
        await db.completeTask(taskId, user.user_id, 0);

        // –°–¥–≤–∏–≥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if (tasks.completed.length > 0) {
            const updatePromises = tasks.completed.map(t => 
                db.updateTaskOrder(t.task_id, (t.order || 0) + 1)
            );
            await Promise.all(updatePromises);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        const activeTask = tasks.active.find(t => t.task_id === parseInt(taskId));
        if (activeTask) {
            const tasksToUpdate = tasks.active.filter(t => 
                (t.order || 0) > (activeTask.order || 0)
            );
            const updatePromises = tasksToUpdate.map(t => 
                db.updateTaskOrder(t.task_id, (t.order || 0) - 1)
            );
            await Promise.all(updatePromises);
        }

        ctx.reply('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è');
        showTasksForManagement(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
});

bot.action(/^uncomplete_task:(\d+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
        const tasks = await db.getUserTasks(user.user_id);
        const maxActiveOrder = tasks.active.reduce((max, task) => 
            Math.max(max, task.order || 0), -1);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–π order = 0
        await db.uncompleteTask(taskId, user.user_id, 0);

        // –°–¥–≤–∏–≥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if (tasks.active.length > 0) {
            const updatePromises = tasks.active.map(t => 
                db.updateTaskOrder(t.task_id, (t.order || 0) + 1)
            );
            await Promise.all(updatePromises);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        const completedTask = tasks.completed.find(t => t.task_id === parseInt(taskId));
        if (completedTask) {
            const tasksToUpdate = tasks.completed.filter(t => 
                (t.order || 0) > (completedTask.order || 0)
            );
            const updatePromises = tasksToUpdate.map(t => 
                db.updateTaskOrder(t.task_id, (t.order || 0) - 1)
            );
            await Promise.all(updatePromises);
        }

        ctx.reply('–ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ');
        showTasksForManagement(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ');
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function showCategories(ctx) {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const categories = await db.getUserCategories(user.user_id);
        const categoriesList = categories.map(cat =>
            `üè∑ ${cat.name}`
        ).join('\n');

        ctx.reply(
            'üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n' + categoriesList,
            Markup.inlineKeyboard([
                [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'add_category')],
                [Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'show_by_category')]
            ])
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showStats(ctx) {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const tasks = await db.getUserTasks(user.user_id);
        const totalTasks = tasks.active.length + tasks.completed.length;
        const activeTasksCount = tasks.active.length;
        const completedTasksCount = tasks.completed.length;

        const completionRate = totalTasks > 0
            ? Math.round((completedTasksCount / totalTasks) * 100)
            : 0;

        const message = 
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n' +
            `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}\n` +
            `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasksCount}\n` +
            `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedTasksCount}\n` +
            `–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${completionRate}%`;

        ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    if (!ctx.session?.state) return;

    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        switch (ctx.session.state) {
            case 'waiting_task_name':
                ctx.session.newTask = {
                    title: ctx.message.text,
                    userId: user.user_id
                };
                const categories = await db.getUserCategories(user.user_id);
                const categoryButtons = categories.map(cat => [
                    Markup.button.callback(cat.name, `select_category:${cat.category_id}`)
                ]);
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard(categoryButtons));
                ctx.session.state = 'waiting_category';
                break;

            case 'waiting_new_title':
                const taskId = ctx.session.taskId;
                const newTitle = ctx.message.text;

                try {
                    await db.updateTaskTitle(taskId, newTitle);
                    ctx.session = {};
                    showTaskDetails(ctx, taskId, 'active');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
                    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
                }
                break;

            case 'waiting_new_description':
                const descTaskId = ctx.session.taskId;
                const newDescription = ctx.message.text === '-' ? '' : ctx.message.text;

                try {
                    await db.updateTaskDescription(descTaskId, newDescription);
                    ctx.session = {};
                    await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                    showTaskDetails(ctx, descTaskId, 'active');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
                    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
                }
                break;

            case 'waiting_category_name':
                const categoryName = ctx.message.text.trim();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                const existingCategories = await db.getUserCategories(user.user_id);
                const exists = existingCategories.some(cat => cat.name.toLowerCase() === categoryName.toLowerCase());
                
                if (exists) {
                    await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
                    return;
                }

                // –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                const colorPalette = [
                    '#FF5252', '#FFD740', '#69F0AE', '#448AFF', '#B388FF',
                    '#FF80AB', '#7C4DFF', '#64FFDA', '#FF8A80', '#EA80FC',
                    '#8C9EFF', '#80D8FF', '#A7FFEB', '#CCFF90', '#FFFF8D'
                ];

                const randomColor = colorPalette[Math.floor(Math.random() * colorPalette.length)];
                
                try {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await db.createCategory(user.user_id, categoryName, randomColor);
                    await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üé®`);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    showCategories(ctx);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
                
                delete ctx.session;
                break;

            case 'entering_notification_time':
                const timeInput = ctx.message.text.trim();
                const timeMatch = timeInput.match(/^(\d{1,2}):(\d{1,2})$/);

                if (!timeMatch) {
                    await ctx.reply(
                        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n' +
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00 –∏–ª–∏ 14:30'
                    );
                    return;
                }

                const notificationTaskId = ctx.session.taskId;
                const selectedDate = ctx.session.selectedDate;
                const task = await db.getTaskById(notificationTaskId);
                
                if (!task) {
                    ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    return;
                }

                // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                const [_, hours, minutes] = timeMatch;
                const hoursNum = parseInt(hours);
                const minutesNum = parseInt(minutes);

                if (hoursNum < 0 || hoursNum > 23 || minutesNum < 0 || minutesNum > 59) {
                    await ctx.reply(
                        '–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.\n' +
                        '–ß–∞—Å—ã: –æ—Ç 00 –¥–æ 23\n' +
                        '–ú–∏–Ω—É—Ç—ã: –æ—Ç 00 –¥–æ 59'
                    );
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                const notificationTime = new Date(selectedDate);
                notificationTime.setHours(hoursNum, minutesNum, 0, 0);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
                const now = new Date();
                if (notificationTime < now) {
                    await ctx.reply(
                        '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.\n' +
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.'
                    );
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                const updatedTask = await db.updateTaskNotifications(notificationTaskId, {
                    notifications_enabled: true,
                    notification_time: notificationTime.toISOString(),
                    notification_sent: false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                });

                if (!updatedTask) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
                }

                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                ctx.session = {};

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await ctx.reply('‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                let message = 'üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n';
                message += `–ó–∞–¥–∞—á–∞: ${task.title}\n`;
                message += `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞: ${notificationTime.toLocaleString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                })}`;

                const keyboard = Markup.inlineKeyboard([
                    [Markup.button.callback('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', `toggle_notifications:${notificationTaskId}`)],
                    [Markup.button.callback('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', `set_notification_time:${notificationTaskId}`)],
                    [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ', `show_task:${notificationTaskId}`)]
                ]);

                await ctx.reply(message, {
                    parse_mode: 'HTML',
                    ...keyboard
                });
                break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.action(/^select_category:(.+)$/, async (ctx) => {
    try {
        if (ctx.session?.state === 'waiting_category') {
            ctx.session.newTask.category = ctx.match[1];
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', {
                parse_mode: 'HTML',
                ...createCalendarKeyboard()
            });
            ctx.session.state = 'waiting_date';
        }
        await ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
async function askTaskType(ctx, action) {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', `select_type:active:${action}`)],
        [Markup.button.callback('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', `select_type:completed:${action}`)]
    ]);
    
    const messages = {
        'delete': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        'change_date': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã:',
        'change_category': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
        'change_status': '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:'
    };
    
    await ctx.reply(messages[action], keyboard);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
bot.action(/select_type:(\w+):(\w+)/, async (ctx) => {
    try {
        const [_, type, action] = ctx.match;
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const tasks = await db.getUserTasks(user.user_id);
        const tasksList = tasks[type].map((task, index) =>
            `${index + 1}. ${task.title}`
        ).join('\n');

        const actionMessages = {
            'delete': '—É–¥–∞–ª–µ–Ω–∏—è',
            'change_date': '–∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã',
            'change_category': '–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'change_status': type === 'active' ? '–æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π' : '–æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–π'
        };

        await ctx.reply(
            `–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è ${actionMessages[action]}:\n\n` +
            (tasksList || '–ù–µ—Ç –∑–∞–¥–∞—á') + '\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:'
        );
        
        ctx.session = { 
            state: `waiting_${action}_number`,
            tasks: tasks[type],
            taskType: type
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
bot.action('change_status', async (ctx) => {
    await askTaskType(ctx, 'change_status');
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
bot.action('delete_task', async (ctx) => {
    await askTaskType(ctx, 'delete');
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
bot.action('show_by_category', async (ctx) => {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const categories = await db.getUserCategories(user.user_id);
        const categoryButtons = categories.map(cat => [
            Markup.button.callback(`${cat.name}`, `show_category:${cat.category_id}`)
        ]);

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á:',
            Markup.inlineKeyboard(categoryButtons)
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
bot.action(/show_category:(.+)/, async (ctx) => {
    try {
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const categoryId = ctx.match[1];
        const categories = await db.getUserCategories(user.user_id);
        const category = categories.find(c => c.category_id === categoryId);
        
        if (!category) {
            await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            await ctx.answerCbQuery();
            return;
        }

        const tasks = await db.getUserTasks(user.user_id);
        
        const activeTasks = tasks.active
            .filter(task => task.category_id === categoryId)
            .map((task, index) =>
                `${index + 1}. ${task.title}\nüìÖ ${formatDate(task.due_date)}`
            ).join('\n');

        const completedTasks = tasks.completed
            .filter(task => task.category_id === categoryId)
            .map((task, index) =>
                `${index + 1}. ‚úÖ ${task.title}\nüìÖ ${formatDate(task.due_date)}`
            ).join('\n');

        const message =
            `üè∑ –ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}":\n\n` +
            'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n' +
            (activeTasks || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á') +
            '\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n' +
            (completedTasks || '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');

        await ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.action(/^select_date:(\d{4})-(\d{2})-(\d{2})$/, async (ctx) => {
    try {
        if (!ctx.session?.state) return;

        if (ctx.session.state === 'waiting_new_date') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
            const taskId = ctx.session.taskId;
            const [_, year, month, day] = ctx.match;
            const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
            date.setHours(12, 0, 0, 0);
            const dueDate = date.toISOString();

            const user = await db.getOrCreateUser(
                ctx.from.id,
                ctx.from.username,
                ctx.from.first_name,
                ctx.from.last_name
            );

            await db.updateTaskDate(taskId, user.user_id, dueDate);
            await ctx.answerCbQuery('–î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            delete ctx.session;
            await showTaskDetails(ctx, taskId, 'active');
        } else if (ctx.session.state === 'waiting_date') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            const user = await db.getOrCreateUser(
                ctx.from.id,
                ctx.from.username,
                ctx.from.first_name,
                ctx.from.last_name
            );

            const [_, year, month, day] = ctx.match;
            const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
            date.setHours(12, 0, 0, 0);
            const dueDate = date.toISOString();

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
            const tasks = await db.getUserTasks(user.user_id);
            
            // –°–¥–≤–∏–≥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
            if (tasks.active.length > 0) {
                const updatePromises = tasks.active.map(t => 
                    db.updateTaskOrder(t.task_id, (t.order || 0) + 1)
                );
                await Promise.all(updatePromises);
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ø–æ—Ä—è–¥–∫–æ–º 0 (–≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞)
            const task = await db.createTask(
                user.user_id,
                ctx.session.newTask.title,
                ctx.session.newTask.category,
                dueDate,
                0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º order = 0 –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            );

            const categories = await db.getUserCategories(user.user_id);
            const category = categories.find(c => c.category_id === ctx.session.newTask.category);

            await ctx.editMessageText(
                '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëç\n' +
                `–ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}\n` +
                `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category ? category.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n` +
                `–î–∞—Ç–∞: ${formatDate(task.due_date)}`
            );

            delete ctx.session;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ë–µ–∑ –¥–∞—Ç—ã" –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.action('select_date:no_date', async (ctx) => {
    try {
        if (ctx.session?.state !== 'waiting_date') return;

        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        const tasks = await db.getUserTasks(user.user_id);
        
        // –°–¥–≤–∏–≥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
        if (tasks.active.length > 0) {
            const updatePromises = tasks.active.map(t => 
                db.updateTaskOrder(t.task_id, (t.order || 0) + 1)
            );
            await Promise.all(updatePromises);
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ø–æ—Ä—è–¥–∫–æ–º 0 (–≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞)
        const task = await db.createTask(
            user.user_id,
            ctx.session.newTask.title,
            ctx.session.newTask.category,
            null,
            0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º order = 0 –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        );

        const categories = await db.getUserCategories(user.user_id);
        const category = categories.find(c => c.category_id === ctx.session.newTask.category);

        await ctx.editMessageText(
            '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëç\n' +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}\n` +
            `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category ? category.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n` +
            '–î–∞—Ç–∞: –ë–µ–∑ —Å—Ä–æ–∫–∞'
        );

        delete ctx.session;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action('add_category', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    ctx.session = { state: 'waiting_category_name' };
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
bot.action(/calendar:(\d+):(\d+):(prev|next)/, async (ctx) => {
    const [_, yearStr, monthStr, direction] = ctx.match;
    let year = parseInt(yearStr);
    let month = parseInt(monthStr);

    if (direction === 'prev') {
        month--;
        if (month < 0) {
            month = 11;
            year--;
        }
    } else {
        month++;
        if (month > 11) {
            month = 0;
            year++;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    const date = new Date(year, month);
    if (date.getFullYear() < new Date().getFullYear() - 1 ||
        date.getFullYear() > new Date().getFullYear() + 5) {
        await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –ª–µ—Ç');
        return;
    }

    const keyboard = createCalendarKeyboard(date);
    await ctx.editMessageReplyMarkup(keyboard.reply_markup);
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.action('ignore', (ctx) => ctx.answerCbQuery());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
bot.action(/select_date:(no_date|(\d+):(\d+):(\d+))/, async (ctx) => {
    if (ctx.session?.state === 'waiting_new_date' &&
        typeof ctx.session.taskToChange === 'number') {

        const match = ctx.match[1];
        const userId = ctx.from.id;
        const userData = initializeUserData(userId);
        const taskIndex = ctx.session.taskToChange;

        if (taskIndex >= 0 && taskIndex < userData.tasks.active.length) {
            if (match === 'no_date') {
                userData.tasks.active[taskIndex].dueDate = null;
            } else {
                const [year, month, day] = match.split(':').map(Number);
                const date = new Date(year, month, day);
                userData.tasks.active[taskIndex].dueDate = date.toISOString();
            }

            await ctx.editMessageText(
                '–î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! üìÖ\n' +
                `–ù–æ–≤–∞—è –¥–∞—Ç–∞: ${formatDate(userData.tasks.active[taskIndex].dueDate)}`
            );
            showTasksList(ctx);
        }
    }

    delete ctx.session;
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.action(/^select_date:(\d+):(\d+):(\d+)$/, async (ctx) => {
    try {
        if (ctx.session?.state !== 'waiting_date') return;

        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        const [year, month, day] = ctx.match.slice(1).map(Number);
        const date = new Date(year, month, day);
        date.setHours(12, 0, 0, 0);
        const dueDate = date.toISOString();

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        const tasks = await db.getUserTasks(user.user_id);
        
        // –°–¥–≤–∏–≥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
        if (tasks.active.length > 0) {
            const updatePromises = tasks.active.map(t => 
                db.updateTaskOrder(t.task_id, (t.order || 0) + 1)
            );
            await Promise.all(updatePromises);
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ø–æ—Ä—è–¥–∫–æ–º 0 (–≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞)
        const task = await db.createTask(
            user.user_id,
            ctx.session.newTask.title,
            ctx.session.newTask.category,
            dueDate,
            0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º order = 0 –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        );

        const categories = await db.getUserCategories(user.user_id);
        const category = categories.find(c => c.category_id === ctx.session.newTask.category);

        await ctx.editMessageText(
            '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëç\n' +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}\n` +
            `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category ? category.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n` +
            `–î–∞—Ç–∞: ${formatDate(task.due_date)}`
        );

        delete ctx.session;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ë–µ–∑ –¥–∞—Ç—ã" –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.action('select_date:no_date', async (ctx) => {
    try {
        if (ctx.session?.state !== 'waiting_date') return;

        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        const tasks = await db.getUserTasks(user.user_id);
        
        // –°–¥–≤–∏–≥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
        if (tasks.active.length > 0) {
            const updatePromises = tasks.active.map(t => 
                db.updateTaskOrder(t.task_id, (t.order || 0) + 1)
            );
            await Promise.all(updatePromises);
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ø–æ—Ä—è–¥–∫–æ–º 0 (–≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞)
        const task = await db.createTask(
            user.user_id,
            ctx.session.newTask.title,
            ctx.session.newTask.category,
            null,
            0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º order = 0 –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        );

        const categories = await db.getUserCategories(user.user_id);
        const category = categories.find(c => c.category_id === ctx.session.newTask.category);

        await ctx.editMessageText(
            '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëç\n' +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}\n` +
            `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category ? category.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n` +
            '–î–∞—Ç–∞: –ë–µ–∑ —Å—Ä–æ–∫–∞'
        );

        delete ctx.session;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function generateCategoryId() {
    const timestamp = Date.now().toString(36);
    const randomPart = Math.random().toString(36).substr(2, 4);
    return `cat_${timestamp}_${randomPart}`;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 

module.exports = bot; 

function formatTaskForList(task, showButtons = true) {
    const statusEmoji = task.status === 'completed' ? '‚úÖ' : 'üìù';
    const category = categories[task.category_id] || { name: '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' };
    
    let text = `${statusEmoji} <b>${task.title}</b>\n`;
    text += `üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}\n`;
    text += `üìÖ –°—Ä–æ–∫: ${formatDate(task.due_date)}\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    if (task.notifications_enabled) {
        const notificationTime = task.notification_time ? 
            new Date(task.notification_time).toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }) : '–ù–µ –∑–∞–¥–∞–Ω–æ';
        text += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${notificationTime}\n`;
    } else {
        text += 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã\n';
    }

    return text;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.action(/^notifications:(\d+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const task = await db.getTaskById(taskId);
        
        if (!task) {
            ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await loadCategories(task.user_id);

        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–µ–ª—å–∑—è
        if (task.status === 'completed') {
            await ctx.answerCbQuery('–ù–µ–ª—å–∑—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏');
            return;
        }

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback(
                    task.notifications_enabled ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    `toggle_notifications:${taskId}`
                )
            ],
            task.notifications_enabled ? [
                Markup.button.callback('‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', `set_notification_time:${taskId}`)
            ] : [],
            [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', `show_task:${taskId}`)]
        ]);

        let message = 'üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n';
        message += `–ó–∞–¥–∞—á–∞: ${task.title}\n`;
        if (task.notifications_enabled) {
            const notificationTime = task.notification_time ? 
                new Date(task.notification_time).toLocaleString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }) : '–ù–µ –∑–∞–¥–∞–Ω–æ';
            message += `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationTime}`;
        } else {
            message += '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã';
        }

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.action(/^toggle_notifications:(\d+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const task = await db.getTaskById(taskId);
        
        if (!task) {
            ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const newState = !task.notifications_enabled;
        let notificationTime = null;

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å –¥–∞—Ç–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 8:00
        if (newState && task.due_date) {
            const date = new Date(task.due_date);
            date.setHours(8, 0, 0, 0);
            notificationTime = date.toISOString();
        }

        await db.updateTaskNotifications(taskId, {
            notifications_enabled: newState,
            notification_time: notificationTime
        });

        await ctx.answerCbQuery(newState ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const updatedTask = await db.getTaskById(taskId);
        await loadCategories(updatedTask.user_id);

        let message = 'üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n';
        message += `–ó–∞–¥–∞—á–∞: ${updatedTask.title}\n`;
        if (updatedTask.notifications_enabled) {
            const notificationTime = updatedTask.notification_time ? 
                new Date(updatedTask.notification_time).toLocaleString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }) : '–ù–µ –∑–∞–¥–∞–Ω–æ';
            message += `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationTime}`;
        } else {
            message += '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã';
        }

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback(
                    updatedTask.notifications_enabled ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    `toggle_notifications:${taskId}`
                )
            ],
            updatedTask.notifications_enabled ? [
                Markup.button.callback('‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', `set_notification_time:${taskId}`)
            ] : [],
            [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', `show_task:${taskId}`)]
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
bot.action(/^set_notification_time:(\d+)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const taskId = ctx.match[1];
        const task = await db.getTaskById(taskId);

        if (!task) {
            ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        ctx.session = {
            state: 'selecting_notification_date',
            taskId: taskId
        };

        let message = 'üìÖ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n';
        message += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:';

        // –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        const keyboard = createCalendarKeyboard(null, true);

        await ctx.reply(message, {
            parse_mode: 'HTML',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
bot.action(/^select_notification_date:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const selectedDate = ctx.match[1];
        const taskId = ctx.session?.taskId;

        if (!taskId) {
            ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏');
            return;
        }

        const task = await db.getTaskById(taskId);
        if (!task) {
            ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        const selectedDateTime = new Date(selectedDate);
        const now = new Date();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
        const selectedDateStart = new Date(selectedDateTime.getFullYear(), selectedDateTime.getMonth(), selectedDateTime.getDate());
        const nowDateStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());

        if (selectedDateStart < nowDateStart) {
            ctx.reply(
                '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.'
            );
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –ø–æ–∑–∂–µ —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏
        if (task.due_date && selectedDateTime > new Date(task.due_date)) {
            ctx.reply(
                '–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏.\n' +
                `–°—Ä–æ–∫ –∑–∞–¥–∞—á–∏: ${formatDate(task.due_date)}`
            );
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        ctx.session = {
            state: 'entering_notification_time',
            taskId: taskId,
            selectedDate: selectedDate
        };

        let message = '‚è∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n';
        message += `–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: ${formatDate(selectedDate)}\n\n`;
        message += '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n';
        message += '–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00';

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', `show_task:${taskId}`)]
        ]);

        await ctx.reply(message, {
            parse_mode: 'HTML',
            ...keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('back_to_menu', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const keyboard = Markup.keyboard([
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'],
            ['üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['‚ùì –ü–æ–º–æ—â—å']
        ]).resize();

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
bot.action('back_to_list', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await showTasksList(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏
bot.action(/^show_task:(\d+)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const taskId = ctx.match[1];
        await showTaskDetails(ctx, taskId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
bot.action(/^complete:(\d+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        await db.completeTask(taskId, user.user_id);
        await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è');
        await showTaskDetails(ctx, taskId, 'completed');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
bot.action(/^uncomplete:(\d+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const user = await db.getOrCreateUser(
            ctx.from.id,
            ctx.from.username,
            ctx.from.first_name,
            ctx.from.last_name
        );

        await db.uncompleteTask(taskId, user.user_id);
        await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ');
        await showTaskDetails(ctx, taskId, 'active');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–¥–∞—á–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
bot.action(/^edit_description:(\d+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    ctx.session = {
        state: 'waiting_new_description',
        taskId: taskId
    };
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n(–û—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ)');
}); 